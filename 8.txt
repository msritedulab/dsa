#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 3
struct CircularQueue
{
int data;
// data to be stored in the queue
};
// Array of structures
struct CircularQueue queue[MAX_SIZE];
int front = -1, rear = -1;
void insert(int value);
int delete();
void display();
int main()
{
int choice, value;
while (1)
{
printf("1. Insert element in the queue\n");
printf("2. Delete element from the queue\n");
printf("3. Display elements in the queue\n");
printf("4. Quit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice)
{
case 1:
printf("Enter the value to be inserted: ");
scanf("%d", &value);
insert(value);
break;
case 2:
value = delete();
if (value != -1)
{
printf("The deleted element is: %d\n", value);

}
break;
case 3:
display();
break;
case 4:
exit(0);
default:
printf("Invalid choice\n");
}
}
return 0;
}
void insert(int value)
{
if ((front == 0 && rear == MAX_SIZE - 1) || (rear + 1 == front))
{
printf("Circular Queue is full\n");
return;
}
if (front == -1)
{
front = rear = 0;
}
else if (rear == MAX_SIZE - 1)
{
rear = 0;
}
else
{
rear++;
}
queue[rear].data = value;
}

int delete()
{
int value;
if (front == -1) // queue is empty
{
printf("QUEUE UNDERFLOW\n");
return -1;
}
value = queue[front].data;
if (front == rear) 
{

front = rear = -1;
}
else if (front == MAX_SIZE - 1) // front point to last of array
{
front = 0;
}
else
{
front++;
}
return value;
}
void display()
{
int i;
if(front == -1) printf(" \n Empty Queue\n");
else
{
printf("\n Front -> %d ",front);
printf("\n Items -> ");
for( i = front; i!=rear; i=(i+1)%MAX_SIZE) {
printf("%d ",queue[i].data);
}
printf("%d ",queue[i].data); // Print last element of queue where front = rear
printf("\n Rear -> %d \n",rear);
}
}


